name: MakiMoki-Windows

# on: [push]
on:
  push:
    branches:
      - windows
    tags:
      - 'period-*'
  pull_request:
    branches:
      - windows

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        arch: [x64] # x64, x86, arm64

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      Solution_Name: MakiMoki.sln
      Test_Project_Path: ""
      Wap_Project_Directory: ""
      Wap_Project_Path: src/wpf/MakiMoki.Wpf/MakiMoki.Wpf.csproj
      Wap_Publish_Base: publish
      Wap_Publish_Output: publish/FutaMaki
      Wap_Publish_Zip: publish/futamaki.zip
      Wap_Version_ConfFile: src/wpf/MakiMoki.Wpf/Properties/publish.conf.json
      App_Center_Group: Collaborators
      App_Center_T4_Conf: src/wpf/MakiMoki.Wpf/Properties/appcenter-secrets.json
      FTP_CANARY_ROOT: publish/canary
      FTP_CANARY_JSON: publish/canary/canary.version.json
      FTP_CANARY_UPLOAD: /canary

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: get config version(Release)
      run: |
        $v = (Get-Content $env:Wap_Version_ConfFile | ConvertFrom-Json).version
        echo "env:VERSION=$v" | Add-Content -Path $env:GITHUB_ENV
        echo "build version for $v"
      if: ${{ github.repository == 'master' || github.repository == 'main' }}

    - name: get config version(Canary)
      run: |
        $v = (Get-Content $env:Wap_Version_ConfFile | ConvertFrom-Json).version
        $a = New-Object System.Version($v)
        $v = Write-Output('{0}.{1}.{2}.{3}' -f $a.Major, $a.Minor, $a.Build, $env:GITHUB_RUN_NUMBER)
        echo "VERSION=$v" | Add-Content -Path $env:GITHUB_ENV
        echo "build version for $v"
      if: ${{ github.repository != 'master' && github.repository != 'main' }}

    - name: Put AppCenter Secrets
      run: |
        $a = '{ "secrets": "$env:secrets" }'
        echo $a | Set-Content -Path $env:App_Center_T4_Conf
      env:
        secrets: ${{ secrets.APP_CENTER_APPSECRETS }}

    # Install the .NET Core workload
    - name: Install .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Update AppCenter Config
      run: |
        echo "setup canary build"
        echo "App_Center_Group=Canary" | Add-Content -Path $env:GITHUB_ENV
      if: ${{ github.repository != 'master' && github.repository != 'main' }}

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    - name: Restore the application
      run: |
        msbuild `
          -t:Restore `
          -p:Configuration=$env:Configuration `
          -m `
          $env:Solution_Name
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Exec T4
      run: |
        msbuild `
          -t:TransformAll `
          -m `
          $env:Solution_Name

    - name: Build app
      run: |
        $d = $env:App_Center_Group.ToUpper()
        dotnet msbuild `
          -p:Configuration=$env:Configuration `
          -p:RuntimeIdentifier=win-$env:Target_Arch `
          "-p:DefineConstants=$d" `
          -m `
          $env:Wap_Project_Path
      env:
        Configuration: ${{ matrix.configuration }}
        Target_Arch: ${{ matrix.arch }}

    - name: Publish app ${{ env.VERSION }}
      run: |
        dotnet publish `
          -c $env:Configuration `
          -r win-$env:Target_Arch `
          -o $env:Wap_Publish_Output `
          --no-restore `
          --no-build `
          $env:Wap_Project_Path
      env:
        Configuration: ${{ matrix.configuration }}
        Target_Arch: ${{ matrix.arch }}

    - name: ls $Wap_Publish_Output
      run: Get-ChildItem $env:Wap_Publish_Output

    - name: Rename dll.conf -> .exe.conf
      run: Move-Item $env:Wap_Publish_Output/futamaki.dll.config $env:Wap_Publish_Output/futamaki.exe.config

    - name: Move WebView2 Dll and Remove
      run: |
        # libvlcがコピーされないので手動で移す
        Copy-Item -Recurse -Force src/wpf/MakiMoki.Wpf/bin/Release/net5.0-windows/win-$env:Target_Arch/libvlc $env:Wap_Publish_Output
        # WebView2のlibをコピー
        Copy-Item -Force $env:Wap_Publish_Output/x86 $env:Wap_Publish_Output/Lib
        Copy-Item -Force $env:Wap_Publish_Output/x64 $env:Wap_Publish_Output/Lib
        Copy-Item -Force $env:Wap_Publish_Output/arm64 $env:Wap_Publish_Output/Lib
        # WebView2のコピー元を削除
        Remove-Item -Recurse $env:Wap_Publish_Output/x86
        Remove-Item -Recurse $env:Wap_Publish_Output/x64
        Remove-Item -Recurse $env:Wap_Publish_Output/arm64

    - name: Remove No Arch Lib
      run: |
        Get-ChildItem -Path $env:Wap_Publish_Output/Lib -Exclude $env:Target_Arch | Remove-Item -Recurse -Force
        Get-ChildItem -Path $env:Wap_Publish_Output/libvlc -Exclude win-$env:Target_Arch | Remove-Item -Recurse -Force
      env:
        Target_Arch: ${{ matrix.arch }}

    - name: Archive Zip
      run: Compress-Archive -Path $env:Wap_Publish_Output -DestinationPath $env:Wap_Publish_Zip

    - name: install node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
      if: ${{ matrix.arch == 'x64' }}

    - name: upload artefact to App Center
      run: |
        echo "upload appcenter: -g=$env:App_Center_Group -b=$env:VERSION"
        npm install -g appcenter-cli
        appcenter login --disable-telemetry --token $env:token
        appcenter distribute release --disable-telemetry -f $env:Wap_Publish_Zip -g $env:App_Center_Group -b $env:VERSION -a azumyar/futamaki ; $r = if($?) { 0 } else { 1 }
        appcenter logout --disable-telemetry
        exit $r
      env:
        token: ${{ secrets.APP_CENTER_TOKEN }}
      if: ${{ matrix.arch == 'x64' }}

    - name: FTP Put Json
      run: |
        New-Item -Force -ItemType Directory $env:FTP_CANARY_ROOT
        $a = '{ "version": "$env:VERSION" }'
        echo $a | Set-Content -Path $env:FTP_CANARY_JSON
      if: ${{ github.repository != 'master' && github.repository != 'main' &&  matrix.arch == 'x64' }}


    - name: FTP Upload
      uses: SamKirkland/FTP-Deploy-Action@4.0.0
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        LOCAL_DIR: ${{ env.FTP_CANARY_ROOT }}
        REMOTE_DIR: ${{ env.FTP_CANARY_UPLOAD }}
      if: ${{ github.repository != 'master' && github.repository != 'main' &&  matrix.arch == 'x64' }}

    #- name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    Appx_Bundle: Always
    #    Appx_Bundle_Platforms: x86|x64
    #    Appx_Package_Build_Mode: StoreUpload
    #    Configuration: ${{ matrix.configuration }}
