<UserControl
    x:Class="Yarukizero.Net.MakiMoki.Wpf.Controls.FutabaMediaViewer"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:ri="clr-namespace:Reactive.Bindings.Interactivity;assembly=ReactiveProperty.WPF"
    xmlns:vlc="clr-namespace:LibVLCSharp.WPF;assembly=LibVLCSharp.WPF"
    xmlns:prism="http://prismlibrary.com/"
    xmlns:converter="clr-namespace:Yarukizero.Net.MakiMoki.Wpf.Converters"
    xmlns:b="clr-namespace:Yarukizero.Net.MakiMoki.Wpf.Behaviors"
    xmlns:local="clr-namespace:Yarukizero.Net.MakiMoki.Wpf.Controls"
    mc:Ignorable="d" 
    prism:ViewModelLocator.AutoWireViewModel="True"
    d:DesignHeight="450" d:DesignWidth="800"
    Background="#88000000">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Xaml/Material.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <converter:MediaEnumQuickSaveItemConverter x:Key="MediaEnumQuickSaveItemConverter" />
        </ResourceDictionary>
    </UserControl.Resources>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="VideoViewPlaying">
            <ri:EventToReactiveCommand Command="{Binding VideoViewPlayingCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="VideoViewPaused">
            <ri:EventToReactiveCommand Command="{Binding VideoViewPausedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="VideoViewStopped">
            <ri:EventToReactiveCommand Command="{Binding VideoViewStoppedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="VideoViewEndReached">
            <ri:EventToReactiveCommand Command="{Binding VideoViewEndReachedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="VideoViewPositionChanged">
            <ri:EventToReactiveCommand Command="{Binding VideoViewPositionChangedCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="4" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="4" />
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
        </Grid.RowDefinitions>

        <!-- 画像 -->
        <Grid
            Grid.Row="1" Grid.Column="1"
            Visibility="{Binding ImageViewVisibility.Value, Mode=OneWay}">
            <ScrollViewer
                HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Disabled"
                ClipToBounds="True"
                IsManipulationEnabled="True">
                <Viewbox 
                    StretchDirection="DownOnly"
                    RenderTransform="{Binding ImageMatrix.Value, Mode=TwoWay}">
                    <Image
                        Source="{Binding ImageSource.Value, Mode=OneWay}"
                        Width="{Binding ImageSource.Value.PixelWidth, Mode=OneWay}"
                        Height="{Binding ImageSource.Value.PixelHeight, Mode=OneWay}"
                        IsHitTestVisible="False"
                        RenderOptions.EdgeMode="Aliased"
                        RenderOptions.BitmapScalingMode="Fant">
                        <Image.CacheMode>
                            <BitmapCache RenderAtScale="1" />
                        </Image.CacheMode>
                        <i:Interaction.Behaviors>
                            <b:ImageBehavior Source="{Binding ImageSourceObject.Value, Mode=OneWay}" />
                        </i:Interaction.Behaviors>
                    </Image>
                </Viewbox>
                <ScrollViewer.ContextMenu>
                    <ContextMenu
                        DataContext="{Binding PlacementTarget.DataContext,Mode=OneWay, RelativeSource={RelativeSource Self}}"
                        IsOpen="{Binding PlacementTarget.DataContext.ImageContextMenuOpened.Value, Mode=TwoWay, RelativeSource={RelativeSource Self}}">
                        <MenuItem
                            Header="保存(_S)"
                            Command="{Binding MenuItemClickSaveCommand, Mode=OneWay}"
                            CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                        <MenuItem Header="クイック保存(_Q)">
                            <MenuItem.ItemsSource>
                                <!-- UpdateTokenいらないかも -->
                                <MultiBinding Converter="{StaticResource MediaEnumQuickSaveItemConverter}">
                                    <Binding Path="Media.Value" Mode="OneWay" />
                                    <Binding Path="UpdateToken.Value" Mode="OneWay" />
                                </MultiBinding>
                            </MenuItem.ItemsSource>
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header" Value="{Binding Name.Value}" />
                                    <Setter Property="IsEnabled" Value="{Binding IsEnabled.Value}" />
                                    <Setter Property="Command" Value="{Binding DataContext.MenuItemClickQuickSaveCommand, Mode=OneWay,  RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                                    <Setter Property="CommandParameter" Value="{Binding}" />
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <Separator />
                        <MenuItem
                            Header="google画像検索(_G)"
                            Command="{Binding MenuItemClickImageSearchGoogleCommand,Mode=OneWay}"
                            CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                        <MenuItem
                            Header="googleレンズ(_L)"
                            Command="{Binding MenuItemClickGoogleLensCommand,Mode=OneWay}"
                            CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                        <MenuItem
                            Header="二次元画像詳細検索(_A)"
                            Command="{Binding MenuItemClickImageSearchAscii2dCommand,Mode=OneWay}"
                            CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                        <Separator />
                        <MenuItem
                            Header="ブラウザで開く(_B)"
                            Command="{Binding MenuItemClickQuickOpenBrowserCommand,Mode=OneWay}"
                            CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                    </ContextMenu>
                </ScrollViewer.ContextMenu>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="ManipulationDelta">
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <ri:EventToReactiveCommand Command="{Binding MouseLeftButtonDownCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <ri:EventToReactiveCommand Command="{Binding MouseLeftButtonUpCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                        <ri:EventToReactiveCommand Command="{Binding MouseMoveCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <ri:EventToReactiveCommand Command="{Binding MouseLeaveCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseWheel">
                        <ri:EventToReactiveCommand Command="{Binding MouseWheelCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ScrollViewer>

            <!-- 閉じるボタン -->
            <Button
                Style="{StaticResource MaterialTransparentButton}"
                Width="32" Height="32"
                HorizontalAlignment="Right"
                VerticalAlignment="Top">
                <Button.Background>
                    <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                </Button.Background>
                <TextBlock
                    FontFamily="{DynamicResource MakimokiSymbolFont}"
                    FontSize="11"
                    Text="{StaticResource FontSymbolCancel}"
                    />
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <ri:EventToReactiveCommand Command="{Binding CloseCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
        </Grid>

        <Grid
            Grid.Row="1" Grid.Column="1"
            Visibility="{Binding VideoViewVisibility.Value, Mode=OneWay}"
            Background="Black">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="48" />
            </Grid.RowDefinitions>
            <vlc:VideoView x:Name="VideoView" Grid.Row="0">
                <!-- これはContextMenuでるけどうーん…
                <Grid Background="#01FFFFFF">
                    <Grid.ContextMenu>
                        <ContextMenu
                        DataContext="{Binding PlacementTarget.DataContext,Mode=OneWay, RelativeSource={RelativeSource Self}}"
                        Tag="{Binding PlacementTarget.Tag,Mode=OneWay, RelativeSource={RelativeSource Self}}">
                            <MenuItem
                            Header="保存"
                            Command="{Binding MenuItemClickSaveCommand, Mode=OneWay}"
                        CommandParameter="{Binding Tag.Contents,Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                            <MenuItem Header="クイック保存">
                                <MenuItem.ItemsSource>
                                    <MultiBinding Converter="{StaticResource MediaEnumQuickSaveItemConverter}">
                                        <Binding Path="Tag.Contents" Mode="OneWay" RelativeSource="{RelativeSource FindAncestor, AncestorType=ContextMenu}" />
                                        <Binding Path="UpdateToken.Value" Mode="OneWay" />
                                    </MultiBinding>
                                </MenuItem.ItemsSource>
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Header" Value="{Binding Name.Value}" />
                                        <Setter Property="IsEnabled" Value="{Binding IsEnabled.Value}" />
                                        <Setter Property="Command" Value="{Binding MenuItemClickQuickSaveCommand, Mode=OneWay}" />
                                        <Setter Property="CommandParameter" Value="{Binding}" />
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                            <Separator />
                            <MenuItem
                            Header="ブラウザで開く"
                            Command="{Binding MenuItemClickQuickOpenBrowserCommand,Mode=OneWay}"
                            CommandParameter="{Binding Tag.Contents,Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                        </ContextMenu>
                    </Grid.ContextMenu>
                </Grid>
                -->
            </vlc:VideoView>
            <Slider
                Grid.Row="1"
                Margin="0,2,0,2"
                VerticalAlignment="Center"
                IsMoveToPointEnabled ="True"
                Minimum="0"
                Maximum="1.0"
                Value="{Binding VideoSliderValue.Value, Mode=OneWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="ValueChanged">
                        <ri:EventToReactiveCommand Command="{Binding VideoSliderValueChangedCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Slider>

            <Grid Grid.Row="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="48" />
                    <ColumnDefinition Width="48" />
                    <ColumnDefinition Width="48" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="48" />
                    <ColumnDefinition Width="24" />
                    <ColumnDefinition Width="128" />
                    <ColumnDefinition Width="48" />
                </Grid.ColumnDefinitions>
                <Button
                    Grid.Column="0"
                    Style="{StaticResource MaterialTransparentButton}"
                    Width="Auto" Height="Auto"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Tag="{Binding Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType=local:FutabaMediaViewer}}">
                    <Button.Resources>
                        <ContextMenu
                            x:Key="ContextMenu"
                            Placement="Top"
                            DataContext="{Binding PlacementTarget.DataContext,Mode=OneWay, RelativeSource={RelativeSource Self}}">
                            <MenuItem
                                Header="保存(_S)"
                                Command="{Binding MenuItemClickSaveCommand, Mode=OneWay}"
                                CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                            <MenuItem Header="クイック保存(_Q)">
                                <MenuItem.ItemsSource>
                                    <MultiBinding Converter="{StaticResource MediaEnumQuickSaveItemConverter}">
                                        <Binding Path="Media.Value" Mode="OneWay" />
                                        <Binding Path="UpdateToken.Value" Mode="OneWay" />
                                    </MultiBinding>
                                </MenuItem.ItemsSource>
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Header" Value="{Binding Name.Value}" />
                                        <Setter Property="IsEnabled" Value="{Binding IsEnabled.Value}" />
                                        <Setter Property="Command" Value="{Binding DataContext.MenuItemClickQuickSaveCommand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                                        <Setter Property="CommandParameter" Value="{Binding}" />
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                            <Separator />
                            <MenuItem
                                Header="ブラウザで開く(_B)"
                                Command="{Binding MenuItemClickQuickOpenBrowserCommand,Mode=OneWay}"
                                CommandParameter="{Binding Media.Value, Mode=OneWay}" />
                        </ContextMenu>
                    </Button.Resources>
                    <Button.Background>
                        <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                    </Button.Background>
                    <TextBlock
                        FontFamily="{DynamicResource MakimokiSymbolFont}"
                        FontSize="16"
                        Text="{StaticResource FontSymbolSave}"
                        />
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <i:ChangePropertyAction 
                                TargetObject="{StaticResource ContextMenu}" 
                                PropertyName="IsOpen"
                                Value="True"/>
                            <i:ChangePropertyAction
                                TargetObject="{StaticResource ContextMenu}" 
                                PropertyName="PlacementTarget" 
                                Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Mode=OneWay}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
                <Button
                    Grid.Column="1"
                    Style="{StaticResource MaterialTransparentButton}"
                    Width="Auto" Height="Auto"
                    Visibility="{Binding VideoPlayButtonVisibility.Value, Mode=OneWay}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
                    <Button.Background>
                        <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                    </Button.Background>
                    <TextBlock
                        FontFamily="{DynamicResource MakimokiSymbolFont}"
                        FontSize="16"
                        Text="{StaticResource FontSymbolPlay}"
                        />
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <ri:EventToReactiveCommand Command="{Binding VideoPlayCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>

                <Button
                    Grid.Column="1"
                    Style="{StaticResource MaterialTransparentButton}"
                    Width="Auto" Height="Auto"
                    Visibility="{Binding VideoPauseButtonVisibility.Value, Mode=OneWay}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
                    <Button.Background>
                        <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                    </Button.Background>
                    <TextBlock
                        FontFamily="{DynamicResource MakimokiSymbolFont}"
                        FontSize="16"
                        Text="{StaticResource FontSymbolPause}"
                        />
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <ri:EventToReactiveCommand Command="{Binding VideoPauseCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>

                <Button
                    Grid.Column="2"
                    Style="{StaticResource MaterialTransparentButton}"
                    Width="Auto" Height="Auto"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
                    <Button.Background>
                        <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                    </Button.Background>
                    <TextBlock
                        FontFamily="{DynamicResource MakimokiSymbolFont}"
                        FontSize="16"
                        Text="{StaticResource FontSymbolStop}"
                        />
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <ri:EventToReactiveCommand Command="{Binding VideoStopCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>


                <ToggleButton
                    Grid.Column="4"
                    Width="Auto" Height="Auto"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    IsChecked="{Binding VideoRepeatValue.Value, Mode=TwoWay}">
                    <TextBlock
                        FontFamily="{DynamicResource MakimokiSymbolFont}"
                        FontSize="16"
                        Text="{StaticResource FontSymbolRepeatAll}"
                        />
                </ToggleButton>
                <TextBlock
                    Grid.Column="5"
                    Foreground="White"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontFamily="{DynamicResource MakimokiSymbolFont}"
                    FontSize="16"
                    Text="{StaticResource FontSymbolSpatialVolume3}"
                    />
                <Slider
                    Grid.Column="6"
                    Minimum="0"
                    Maximum="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    TickPlacement="None"
                    TickFrequency="0.01"
                    SmallChange="0.05"
                    LargeChange="0.05"
                    Orientation="Horizontal"
                    Value="{Binding VideoVolumeValue.Value, Mode=TwoWay}"
                    />
                <Button
                    Grid.Column="7"
                    Style="{StaticResource MaterialTransparentButton}"
                    Width="Auto" Height="Auto"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
                    <Button.Background>
                        <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                    </Button.Background>
                    <TextBlock
                        FontFamily="{DynamicResource MakimokiSymbolFont}"
                        FontSize="16"
                        Text="{StaticResource FontSymbolCancel}"
                        />
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <ri:EventToReactiveCommand Command="{Binding CloseCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>

            </Grid>
        </Grid>

        <Grid
            Grid.Row="1" Grid.Column="1"
            Visibility="{Binding ErrorViewVisibility.Value, Mode=OneWay}">
            <TextBlock
                Foreground="White"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontFamily="{DynamicResource MakimokiMessageFont}"
                FontWeight="{DynamicResource MakimokiMessageFontWeight}"
                Text="読み込みエラー"
                />

            <!-- 閉じるボタン -->
            <Button
                Style="{StaticResource MaterialTransparentButton}"
                Width="32" Height="32"
                HorizontalAlignment="Right"
                VerticalAlignment="Top">
                <Button.Background>
                    <SolidColorBrush Color="{DynamicResource MakimokiSecondaryColor}" />
                </Button.Background>
                <TextBlock
                    FontFamily="{DynamicResource MakimokiSymbolFont}"
                    FontSize="11"
                    Text="{StaticResource FontSymbolCancel}"
                    />
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <ri:EventToReactiveCommand Command="{Binding CloseCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
        </Grid>
    </Grid>
</UserControl>
